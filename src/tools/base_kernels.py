from ..tools.kernels import create_rbf, create_linear, create_period
import gpflow as gpf
from gpflow.utilities import set_trainable, deepcopy
import itertools
'''
UCI DATA
'''

def create_air_kernel_pool(X_train, trainable = False, rescale = False, hyper_priors = None, interaction = False):
    kernels = []

    kernels.append(create_rbf(X_train[:, 0], active_dims = [0], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 0], active_dims = [0], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 0], active_dims = [0], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 1], active_dims = [1], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 1], active_dims = [1], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 1], active_dims = [1], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 2], active_dims = [2], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 2], active_dims = [2], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 2], active_dims = [2], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 3], active_dims = [3], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 3], active_dims = [3], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 3], active_dims = [3], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 4], active_dims = [4], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 5], active_dims = [5], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 6], active_dims = [6], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 6], active_dims = [6], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 6], active_dims = [6], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 7], active_dims = [7], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 8], active_dims = [8], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 11], active_dims = [11], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 12], active_dims = [12], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 13], active_dims = [13], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 14], active_dims = [14], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 15], active_dims = [15], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 16], active_dims = [16], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 17], active_dims = [17], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 18], active_dims = [18], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 19], active_dims = [19], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 20], active_dims = [20], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 21], active_dims = [21], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 22], active_dims = [22], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    if interaction == True:
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 0], active_dims = [0], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 1], active_dims = [1], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 2], active_dims = [2], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 3], active_dims = [3], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 5], active_dims = [5], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 6], active_dims = [6], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 7], active_dims = [7], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 8], active_dims = [8], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 11], active_dims = [11], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 12], active_dims = [12], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 13], active_dims = [13], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 14], active_dims = [14], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 15], active_dims = [15], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 16], active_dims = [16], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 17], active_dims = [17], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 18], active_dims = [18], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 19], active_dims = [19], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 20], active_dims = [20], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 21], active_dims = [21], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors) * create_rbf(X_train[:, 22], active_dims = [22], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
    return kernels
def create_wine_kernel_pool(X_train, trainable = False, rescale = False, hyper_priors = None, interaction = False):
    kernels = []

    kernels.append(create_rbf(X_train[:, 0], active_dims = [0], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 0], active_dims = [0], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 0], active_dims = [0], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 1], active_dims = [1], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 1], active_dims = [1], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 1], active_dims = [1], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 2], active_dims = [2], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 2], active_dims = [2], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 2], active_dims = [2], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 3], active_dims = [3], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 3], active_dims = [3], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 3], active_dims = [3], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 4], active_dims = [4], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 5], active_dims = [5], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 5], active_dims = [5], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 5], active_dims = [5], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 6], active_dims = [6], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 6], active_dims = [6], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 6], active_dims = [6], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 7], active_dims = [7], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 7], active_dims = [7], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 7], active_dims = [7], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 8], active_dims = [8], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 8], active_dims = [8], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 8], active_dims = [8], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 9], active_dims = [9], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 10], active_dims = [10], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    if interaction == True:
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 0], active_dims = [0], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 1], active_dims = [1], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 2], active_dims = [2], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 3], active_dims = [3], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 5], active_dims = [5], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 6], active_dims = [6], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 7], active_dims = [7], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 8], active_dims = [8], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 0], active_dims = [0], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 1], active_dims = [1], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 2], active_dims = [2], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 3], active_dims = [3], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 5], active_dims = [5], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 6], active_dims = [6], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 7], active_dims = [7], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 8], active_dims = [8], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
    return kernels

'''
TOY DATA
'''
def polynomial_kernel_expansion(base_kernels, order, scaling_parameter = False):
    '''`
    raise to an order
    '''
    if(order == 1): 
        return base_kernels
    else:
        kernels = []
        indices = range(len(base_kernels))
        comb = itertools.product(indices, repeat=order)
        sorted_tuples = [tuple(sorted(t)) for t in comb]
        unique_kernel_expansions = list(set(sorted_tuples))
        for expansion in unique_kernel_expansions:
            rbf_inds = []
            # initialize
            interaction_kernels = [deepcopy(base_kernels[expansion[0]])]
            if isinstance(base_kernels[expansion[0]], gpf.kernels.RBF): 
                rbf_inds = [expansion[0]]

            # iterate, forming interaction term
            for ind in expansion[1:]:
                if ind not in rbf_inds: 
                    if isinstance(base_kernels[ind], gpf.kernels.RBF):
                        rbf_inds.append(ind)
                    interaction_kernels.append(deepcopy(base_kernels[ind]))
            
            # add if interaction term (more than one kernel)
            if len(interaction_kernels) > 1:
                kernel = gpf.kernels.Product(interaction_kernels)
                #set_trainable(kernel.variance, scaling_parameter)
                kernels.append(kernel)

        return kernels + polynomial_kernel_expansion(base_kernels, order - 1)

# Every base kernel applied to every dimension 
def initialize_base_kernels(X, hyper_priors = None, scaling_parameter = False, rescale_linear = False):
    base_kernels = []
    for dim in range(X.shape[1]):
        linear = create_linear(X[:, dim], active_dims = [dim], hyper_priors = hyper_priors, rescale = rescale_linear) # linear
        periodic = create_period(X[:, dim], active_dims = [dim], hyper_priors = hyper_priors) # periodic
        rbf = create_rbf(X[:, dim], active_dims = [dim], hyper_priors = hyper_priors) # rbf

        # set scaling parameters on or off
        set_trainable(linear.variance, scaling_parameter)
        set_trainable(rbf.variance, scaling_parameter)
        set_trainable(periodic.variance, scaling_parameter)
        if not scaling_parameter: 
            linear.variance.assign(to_default_float(1))
            rbf.variance.assign(to_default_float(1))
            periodic.variance.assign(to_default_float(1))
        
        base_kernels.append(linear)
        base_kernels.append(rbf)
        base_kernels.append(periodic)
    
    return(base_kernels)

def create_chloride_kernel_pool(X_train, trainable = False, rescale = False, hyper_priors = None, interaction = False):
    kernels = []

    kernels.append(create_rbf(X_train[:, 0], active_dims = [0], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 0], active_dims = [0], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 0], active_dims = [0], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 1], active_dims = [1], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 1], active_dims = [1], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 1], active_dims = [1], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 2], active_dims = [2], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 2], active_dims = [2], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 2], active_dims = [2], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 3], active_dims = [3], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 3], active_dims = [3], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 3], active_dims = [3], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 4], active_dims = [4], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 5], active_dims = [5], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 5], active_dims = [5], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 5], active_dims = [5], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 6], active_dims = [6], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 6], active_dims = [6], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 6], active_dims = [6], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 7], active_dims = [7], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 7], active_dims = [7], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 7], active_dims = [7], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 8], active_dims = [8], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 8], active_dims = [8], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 8], active_dims = [8], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 9], active_dims = [9], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    kernels.append(create_period(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors))
    kernels[-1].base_kernel.variance.assign(1.)
    set_trainable(kernels[-1].base_kernel.variance, trainable)
    kernels.append(create_linear(X_train[:, 10], active_dims = [10], rescale = rescale, hyper_priors = hyper_priors))
    kernels[-1].variance.assign(1.)
    set_trainable(kernels[-1].variance, trainable)
    if interaction == True:
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 0], active_dims = [0], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 1], active_dims = [1], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 2], active_dims = [2], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 3], active_dims = [3], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 5], active_dims = [5], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 6], active_dims = [6], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 7], active_dims = [7], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 8], active_dims = [8], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors) * create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 0], active_dims = [0], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 1], active_dims = [1], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 2], active_dims = [2], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 3], active_dims = [3], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 4], active_dims = [4], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 5], active_dims = [5], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 6], active_dims = [6], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 7], active_dims = [7], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 8], active_dims = [8], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
        kernels.append(create_rbf(X_train[:, 9], active_dims = [9], hyper_priors = hyper_priors) * create_rbf(X_train[:, 10], active_dims = [10], hyper_priors = hyper_priors))
        kernels[-1].kernels[0].variance.assign(1.)
        kernels[-1].kernels[1].variance.assign(1.)
        set_trainable(kernels[-1].kernels[0].variance, trainable)
        set_trainable(kernels[-1].kernels[1].variance, trainable)
    return kernels

